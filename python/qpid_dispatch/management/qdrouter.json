{
    "description":  "Schema for the Qpid Dispatch Router management model. See qdrouter.json.readme.txt.",

    "prefix": "org.apache.qpid.dispatch",

    "entityTypes": {

        "entity": {
            "description": "Base entity type for all entities.",
            "attributes": {
                "name": {
                    "type": "string",
                    "unique": true,
                    "description": "Unique name optionally assigned by user. Can be changed.",
                    "create": true
                },
                "identity": {
                    "type": "string",
                    "unique": true,
                    "description": "Unique identity generated by the system. Will not change."
                },
                "type": {
                    "type": "string",
                    "required": true,
                    "description": "Management entity type.",
                    "create": true
                }
            },

            "operationDefs": {
                "CREATE": {
                    "description": "Create a new entity.",
                    "request": {
                        "properties": {
                            "name": {
                                "description": "Name of new entity. Optional, defaults to identity.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of new entity.",
                                "type": "string",
                                "required": true
                            }
                        },
                        "body": {
                            "description": "Attributes for the new entity. Can include name and/or type.",
                            "type": "map",
                            "required": true
                        }
                    },
                    "response": {
                        "body": {
                            "description": "Attributes of the entity",
                            "type": "map"
                        }
                    }
                },
                "READ": {
                    "description": "Read attributes of a single entity",
                    "request": {
                        "properties": {
                            "name": {
                                "description": "Name of desired entity. Must supply name or identity.",
                                "type": "string"
                            },
                            "identity": {
                                "description": "Identity of desired entity. Must supply name or identity.",
                                "type": "string"

                            },
                            "type": {
                                "description": "Type of desired entity.",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "Attributes of the entity",
                            "type": "map"
                        }
                    }
                },
                "UPDATE": {
                    "description": "Update attributes of an entity",
                    "request": {
                        "properties": {
                            "name": {
                                "description": "Name of desired entity. Must supply name or identity.",
                                "type": "string"
                            },
                            "identity": {
                                "description": "Identity of desired entity. Must supply name or identity.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of desired entity.",
                                "type": "string"
                            }
                        },
                        "body": {
                            "description": "Attributes to update for the entity. Can include name or identity.",
                            "type": "map"
                        }
                    },
                    "response": {
                        "body": {
                            "description": "Updated attributes of the entity",
                            "type": "map"
                        }
                    }
                },
                "DELETE": {
                    "description": "Delete an entity",
                    "request": {
                        "properties": {
                            "name": {
                                "description": "Name of desired entity. Must supply name or identity.",
                                "type": "string"

                            },
                            "identity": {
                                "description": "Identity of desired entity. Must supply name or identity.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of desired entity.",
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },

        "org.amqp.management": {
            "description": "The standard AMQP management node interface.",
            "fullName": true,
            "extends": "operationalEntity",
            "operations": ["QUERY", "GET-TYPES", "GET-ANNOTATIONS", "GET-OPERATIONS", "GET-ATTRIBUTES", "GET-MGMT-NODES"],
            "operationDefs": {
                "QUERY": {
                    "description": "Query for attribute values of multiple entities.",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "entityType": {
                                "description": "If set, restrict query results to entities that extend (directly or indirectly) this type",
                                "type": "string"
                            },
                            "offset": {
                                "description": "If set, specifies the number of the first element of the result set to be returned.",
                                "type": "integer",
                                "default": 0
                            },
                            "count": {
                                "description": "If set, specifies the number of entries from the result set to return. If not set return all from `offset`",
                                "type": "integer"
                            }
                        },
                        "body": {
                            "description": "A map containing the key `attributeNames` with value a list of (string) attribute names to return. If the list or the map is empty or the body is missing all attributes are returned.",
                            "type": "map"
                        }
                    },
                    "response": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "count": {
                                "description": "Number of results returned",
                                "type": "integer"
                            }
                        },
                        "body": {
                            "description": "A map with two entries. `attributeNames` is a list of the attribute names returned. `results` is a list of lists each containing the attribute values for a single entity in the same order as the names in the `attributeNames` entry. If an attribute name is not applicable for an entity then the corresponding value is `null`",
                            "type": "map"
                        }
                    }
                },
                "GET-TYPES": {
                    "description": "Get the set of entity types and their inheritance relationships",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "entityType": {
                                "description": "If set, restrict query results to entities that extend (directly or indirectly) this type",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A map where each key is an entity type name (string) and the corresponding value is the list of the entity types (strings) that it extends.",
                            "type": "map"
                        }
                    }
                },
                "GET-OPERATIONS": {
                    "description": "Get the set of entity types and the operations they support",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "entityType": {
                                "description": "If set, restrict query results to entities that extend (directly or indirectly) this type",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A map where each key is an entity type name (string) and the corresponding value is the list of operation names (strings) that it supports.",
                            "type": "map"
                        }
                    }
                },
                "GET-ANNOTATIONS": {
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "entityType": {
                                "description": "If set, restrict query results to entities that extend (directly or indirectly) this type",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A map where each key is an entity type name (string) and the corresponding value is the list of annotations (strings) that it  implements.",
                            "type": "map"
                        }
                    }
                },
                "GET-ATTRIBUTES": {
                    "description": "Get the set of entity types",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "entityType": {
                                "description": "If set, restrict query results to entities that extend (directly or indirectly) this type",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A map where each key is an entity type name (string) and the corresponding value is a list (of strings) of attributes on that entity type.",
                            "type": "map"
                        }
                    }
                },
                "GET-MGMT-NODES": {
                    "description": "Get the addresses of all management nodes known to this router",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A list of addresses (strings) of management nodes known to this management node.",
                            "type": "list"
                        }
                    }
                }
            }
        },

        "management": {
            "description": "Qpid dispatch router extensions to the standard org.amqp.management interface.",
            "extends": "org.amqp.management",
            "singleton": true,
            "operations": ["GET-SCHEMA", "GET-JSON-SCHEMA", "GET-LOG", "PROFILE"],
            "operationDefs": {
                "GET-SCHEMA": {
                    "description": "Get the qdrouterd schema for this router in AMQP map format",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "The qdrouter schema as a map.",
                            "type": "map"
                        }
                    }
                },
                "GET-SCHEMA-JSON": {
                    "description": "Get the qdrouterd schema for this router in JSON format",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "indent": {
                                "description": "Number of spaces to indent the formatted result. If not specified, the result is in minimal format, no unnecessary spaces or newlines.",
                                "type": "integer"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "The qdrouter schema as a JSON string.",
                            "type": "string"
                        }
                    }
                },
                "GET-LOG": {
                    "description": "Get recent log entries from the router.",
                    "request": {
                        "properties": {
                            "identity": {
                                "description": "Set to the value `self`",
                                "type": "string"
                            },
                            "limit": {
                                "description": "Maximum number of log entries to get.",
                                "type": "integer"
                            }
                        }
                    },
                    "response": {
                        "body": {
                            "description": "A list of log entries where each entry is a list of: module name(string), level name(string), message text(string), file name(string or None), line number(integer or None) , timestamp(integer)",
                            "type": "string"
                        }
                    }
                }
            }
        },

        "configurationEntity": {
            "description": "Base type for entities containing configuration information.",
            "extends": "entity",
            "attributes": {},
            "operations": ["READ"]
        },

        "operationalEntity": {
            "description": "Base type for entities containing current operational information.",
            "extends": "entity",
            "operations": ["READ"],
            "attributes": {}
        },

        "router": {
            "description":"Tracks peer routers and computes routes to destinations.",
            "extends": "configurationEntity",
            "singleton": true,
            "attributes": {
                "id": {
                    "description":"Router's unique identity. One of id or routerId is required. The router will fail to start without id or routerId",
                    "type": "string",
                    "required": false,
                    "create": true
                },
                "mode": {
                    "type": [
                        "standalone",
                        "interior"
                    ],
                    "default": "standalone",
                    "description": "In standalone mode, the router operates as a single component.  It does not participate in the routing protocol and therefore will not cooperate with other routers. In interior mode, the router operates in cooperation with other interior routers in an interconnected network.",
                    "create": true
                },
                "area": {
                    "type": "string",
                    "description": "Unused placeholder.",
                    "default": 0
                },
                "helloInterval": {
                    "type": "integer",
                    "default": 1,
                    "description": "Interval in seconds between HELLO messages sent to neighbor routers.",
                    "create": true
                },
                "helloMaxAge": {
                    "type": "integer",
                    "default": 3,
                    "description": "Time in seconds after which a neighbor is declared lost if no HELLO is received.",
                    "create": true
                },
                "raInterval": {
                    "type": "integer",
                    "default": 30,
                    "description": "Interval in seconds between Router-Advertisements sent to all routers in a stable network.",
                    "create": true
                },
                "raIntervalFlux": {
                    "type": "integer",
                    "default": 4,
                    "description": "Interval in seconds between Router-Advertisements sent to all routers during topology fluctuations.",
                    "create": true
                },
                "remoteLsMaxAge": {
                    "type": "integer",
                    "default": 60,
                    "description": "Time in seconds after which link state is declared stale if no RA is received.",
                    "create": true
                },
                "addrCount": {
                    "type":
                    "integer", "description":"Number of addresses known to the router.",
                    "graph": true
                },
                "linkCount": {
                    "type": "integer",
                    "description":"Number of links attached to the router node.",
                    "graph": true
                },
                "nodeCount": {
                    "type": "integer",
                    "description":"Number of known peer router nodes.",
                    "graph": true
                },
                "workerThreads": {
                    "type": "integer",
                    "default": 4,
                    "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) .",
                    "create": true

                },
                "debugDump": {
                    "type": "path",
                    "description": "A file to dump debugging information that can't be logged normally.",
                    "create": true

                },
                "saslConfigPath": {
                    "type": "path",
                    "description": "Absolute path to the SASL configuration file.",
                    "required": false,
                    "create": true
                },
                "saslConfigName": {
                    "type": "string",
                    "description": "Name of the SASL configuration.  This string + '.conf' is the name of the configuration file.",
                    "default": "qdrouterd",
                    "required": false,
                    "create": true
                },
                "routerId": {
                    "description":"(DEPRECATED) Router's unique identity. This attribute has been deprecated. Use id instead",
                    "type": "string",
                    "required": false,
                    "deprecated": true,
                    "create": true
                },
                "mobileAddrMaxAge": {
                    "type": "integer",
                    "default": 60,
                    "deprecated": true,
                    "description": "(DEPRECATED) This value is no longer used in the router.",
                    "create": true
                }                                
            }
        },
        
        "sslProfile": {
            "description":"Attributes for setting TLS/SSL configuration for connections.",
            "referential": true,
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "certDb": {
                    "type": "path",
                    "description": "The absolute path to the database that contains the public certificates of trusted certificate authorities (CA).",
                    "create": true
                },
                "certFile": {
                    "type": "path",
                    "description": "The absolute path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile.",
                    "create": true

                },
                "keyFile": {
                    "type": "path",
                    "description": "The absolute path to the file containing the PEM-formatted private key for the above certificate.",
                    "create": true

                },
                "passwordFile": {
                    "type": "path",
                    "description": "If the above private key is password protected, this is the absolute path to a file containing the password that unlocks the certificate key.",
                    "create": true

                },
                "password": {
                    "type": "string",
                    "description": "An alternative to storing the password in a file referenced by passwordFile is to supply the password right here in the configuration file.  This option can be used by supplying the password in the 'password' option.  Don't use both password and passwordFile in the same profile.",
                    "create": true

                },
                "uidFormat": {
                    "type": "string",
                    "description": "A list of x509 client certificate fields that will be used to build a string that will uniquely identify the client certificate owner. For e.g. a value of 'cou' indicates that the uid will consist of c - common name concatenated with o - organization-company name concatenated with u - organization unit; or a value of 'o2' indicates that the uid will consist of o (organization name) concatenated with 2 (the sha256 fingerprint of the entire certificate) . Allowed values can be any combination of 'c'( ISO3166 two character country code), 's'(state or province), 'l'(Locality; generally - city), 'o'(Organization - Company Name), 'u'(Organization Unit - typically certificate type or brand), 'n'(CommonName - typically a user name for client certificates) and '1'(sha1 certificate fingerprint, as displayed in the fingerprints section when looking at a certificate with say a web browser is the hash of the entire certificate) and 2 (sha256 certificate fingerprint) and 5 (sha512 certificate fingerprint). ",
                    "create": true
                },
                "displayNameFile": {
                    "type": "string",
                    "description": "The absolute path to the file containing the unique id to dispay name mapping",
                    "create": true
                }
            }
        },
        
        "listener": {
            "description": "Listens for incoming connections to the router.",
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "host": {
                    "description":"IP address: ipv4 or ipv6 literal or a host name",
                    "type": "string",
                    "default": "127.0.0.1",
                    "create": true
                },
                "port": {
                    "description": "Port number or symbolic service name.",
                    "type": "string",
                    "default": "amqp",
                    "create": true

                },
                "protocolFamily": {
                    "type": ["IPv4", "IPv6"],
                    "required": false,
                    "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address.",
                    "create": true
                },
                "role": {
                    "type": [
                        "normal",
                        "inter-router",
                        "route-container",
                        "on-demand"
                    ],
                    "default": "normal",
                    "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection. on-demand role has been deprecated.",
                    "create": true
                },
                "cost": {
                    "type": "integer",
                    "default": "1",
                    "required": false,
                    "create": true,
                    "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
                },                     
                "sslProfile": {
                    "type": "string",
                    "required": false,
                    "description": "Name of the sslProfile.",
                    "create": true
                },            
                "saslMechanisms": {
                    "type": "string",
                    "required": false,
                    "description": "Space separated list of accepted SASL authentication mechanisms.",
                    "create": true
                },
                "authenticatePeer": {
                    "type": "boolean",
                    "default": true,
                    "description": "yes: Require the peer's identity to be authenticated; no: Do not require any authentication.",
                    "create": true
                },
                "requireEncryption": {
                    "type": "boolean",
                    "default": false,
                    "description": "yes: Require the connection to the peer to be encrypted; no: Permit non-encrypted communication with the peer",
                    "create": true
                },
                "requireSsl": {
                    "type": "boolean",
                    "default": false,
                    "description": "yes: Require the use of SSL or TLS on the connection; no: Allow clients to connect without SSL or TLS.",
                    "create": true
                },
                "trustedCerts": {
                    "type": "path",
                    "description": "This optional setting can be used to reduce the set of available CAs for client authentication.  If used, this setting must provide the absolute path to a PEM file that contains the trusted certificates.",
                    "create": true
                },
                "maxFrameSize": {
                    "type": "integer",
                    "default": 16384,
                    "description": "Defaults to 16384.  If specified, it is the maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity.",
                    "create": true
                },
                "idleTimeoutSeconds": {
                    "type": "integer",
                    "default": 16,
                    "description": "The idle timeout, in seconds, for connections through this listener.  If no frames are received on the connection for this time interval, the connection shall be closed.",
                    "create": true
                },
                "stripAnnotations": {
                    "type": ["in", "out", "both", "no"],
                    "default": "both",
                    "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations",
                    "create": true
                },
                "linkCapacity": {
                    "type": "integer",
                    "create": true,
                    "required": false,
                    "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
                },
                "addr": {
                    "description":"(DEPRECATED)IP address: ipv4 or ipv6 literal or a host name. This attribute has been deprecated. Use host instead",
                    "deprecated": true,
                    "type": "string",
                    "default": "127.0.0.1",
                    "create": true
                },
                "allowNoSasl": {
                    "type": "boolean",
                    "create": true,
                    "deprecated": true,
                    "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
                },
                "requirePeerAuth": {
                    "type": "boolean",
                    "create": true,
                    "deprecated": true,
                    "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
                },
                "allowUnsecured": {
                    "type": "boolean",
                    "create": true,
                    "deprecated": true,
                    "description": "(DEPRECATED) This attribute is now controlled by the requireEncryption attribute."
                }                                               
            }
        },

        "connector": {
            "description": "Establishes an outgoing connection from the router.",
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "host": {
                    "description":"IP address: ipv4 or ipv6 literal or a host name",
                    "type": "string",
                    "default": "127.0.0.1",
                    "create": true
                },
                "port": {
                    "description": "Port number or symbolic service name.",
                    "type": "string",
                    "default": "amqp",
                    "create": true

                },
                "protocolFamily": {
                    "type": ["IPv4", "IPv6"],
                    "required": false,
                    "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address.",
                    "create": true
                },
                
                "role": {
                    "type": [
                        "normal",
                        "inter-router",
                        "route-container",
                        "on-demand"
                    ],
                    "default": "normal",
                    "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection. on-demand role has been deprecated.",
                    "create": true
                },
                "cost": {
                    "type": "integer",
                    "default": "1",
                    "required": false,
                    "create": true,
                    "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
                },                
                            
                "sslProfile": {
                    "type": "string",
                    "required": false,
                    "description": "Name of the sslProfile.",
                    "create": true
                },            
                "saslMechanisms": {
                    "type": "string",
                    "required": false,
                    "description": "Space separated list of accepted SASL authentication mechanisms.",
                    "create": true
                },
                "allowRedirect": {
                    "type": "boolean",
                    "default": true,
                    "description": "Allow the peer to redirect this connection to another address.",
                    "create": true
                },
                "maxFrameSize": {
                    "type": "integer",
                    "default": 65536,
                    "description": "Maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity.",
                    "create": true
                },
                "idleTimeoutSeconds": {
                    "type": "integer",
                    "default": 16,
                    "description": "The idle timeout, in seconds, for connections through this connector.  If no frames are received on the connection for this time interval, the connection shall be closed.",
                    "create": true
                },
                "stripAnnotations": {
                    "type": ["in", "out", "both", "no"],
                    "default": "both",
                    "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations",
                    "create": true
                },
                "linkCapacity": {
                    "type": "integer",
                    "create": true,
                    "required": false,
                    "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
                },
                "verifyHostName": {
                    "type": "boolean",
                    "default": true,
                    "description": "yes: Ensures that when initiating a connection (as a client) the host name in the URL to which this connector connects to matches the host name in the digital certificate that the peer sends back as part of the SSL connection; no: Does not perform host name verification",
                    "create": true
                },
                "saslUsername": {
                    "type": "string",
                    "required": false,
                    "description": "The user name that the connector is using to connect to a peer.",
                    "create": true
                },
                "saslPassword": {
                    "type": "string",
                    "required": false,
                    "description": "The password that the connector is using to connect to a peer.",
                    "create": true,
                    "hidden": true
                },
                "addr": {
                    "description":"(DEPRECATED)IP address: ipv4 or ipv6 literal or a host name. This attribute has been deprecated. Use host instead",
                    "deprecated": true,
                    "type": "string",
                    "default": "127.0.0.1",
                    "create": true
                }                
            }
        },

        "log": {
            "description": "Configure logging for a particular module. You can use the `UPDATE` operation to change log settings while the router is running.",
            "extends": "configurationEntity",
            "operations": ["UPDATE"],
            "attributes": {
                "module": {
                    "type":[
                        "ROUTER",
                        "ROUTER_CORE",
                        "ROUTER_HELLO",
                        "ROUTER_LS",
                        "ROUTER_MA",
                        "MESSAGE",
                        "SERVER",
                        "AGENT",
                        "CONTAINER",
                        "ERROR",
                        "POLICY",
                        "DEFAULT"
                    ],
                    "required": true,
                    "description": "Module to configure. The special module 'DEFAULT' specifies defaults for all modules.",
                    "update": true
                },
                "enable": {
                    "type": "string",
                    "description": "Levels are: trace, debug, info, notice, warning, error, critical. The enable string is a comma-separated list of levels. A level may have a trailing '\\+' to enable that level and above. For example 'trace,debug,warning+' means enable trace, debug, warning, error and critical. The value 'none' means disable logging for the module.",
                    "update": true
                },
                "timestamp": {
                    "type": "boolean",
                    "description": "Include timestamp in log messages.",
                    "update": true
                },
                "source": {
                    "type": "boolean",
                    "description": "Include source file and line number in log messages.",
                    "update": true
                },
                "output": {
                    "type": "string",
                    "description": "Where to send log messages. Can be 'stderr', 'stdout', 'syslog' or a file name.",
                    "update": true
                }
            }
        },

        "router.config.address": {
            "description": "Entity type for address configuration.  This is used to configure the treatment of message-routed deliveries within a particular address-space.  The configuration controls distribution and address phasing.",
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "prefix": {
                    "type": "string",
                    "description": "The address prefix for the configured settings",
                    "create": true,
                    "required": true
                },
                "distribution": {
                    "type": ["multicast", "closest", "balanced"],
                    "description": "Treatment of traffic associated with the address",
                    "create": true,
                    "required": false,
                    "default": "balanced"
                },
                "waypoint": {
                    "type": "boolean",
                    "description": "Designates this address space as being used for waypoints.  This will cause the proper address-phasing to be used.",
                    "create": true,
                    "required": false,
                    "default": false
                },
                "ingressPhase": {
                    "type": "integer",
                    "description": "Advanced - Override the ingress phase for this address",
                    "create": true,
                    "required": false
                },
                "egressPhase": {
                    "type": "integer",
                    "description": "Advanced - Override the egress phase for this address",
                    "create": true,
                    "required": false
                }
            }
        },

        "router.config.linkRoute": {
            "description": "Entity type for link-route configuration.  This is used to identify remote containers that shall be destinations for routed link-attaches.  The link-routing configuration applies to an addressing space defined by a prefix.",
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "prefix": {
                    "type": "string",
                    "description": "The address prefix for the configured settings",
                    "create": true,
                    "required": true
                },
                "containerId": {
                    "type": "string",
                    "description": "ContainerID for the target container",
                    "create": true,
                    "required": false
                },
                "connection": {
                    "type": "string",
                    "description": "The name from a connector or listener",
                    "create": true,
                    "required": false
                },
                "distribution": {
                    "type": ["linkBalanced"],
                    "description": "Treatment of traffic associated with the address",
                    "create": true,
                    "required": false,
                    "default": "linkBalanced"
                },
                "dir": {
                    "type": ["in", "out"],
                    "description": "The permitted direction of links: 'in' means client senders; 'out' means client receivers",
                    "create": true,
                    "required": true
                },
                "operStatus": {
                    "type": ["inactive", "active"],
                    "description": "The operational status of this linkRoute: inactive - The remote container is not connected; active - the remote container is connected and ready to accept link routed attachments.",
                    "create": false
                }
            }
        },

        "router.config.autoLink": {
            "description": "Entity type for configuring auto-links.  Auto-links are links whose lifecycle is managed by the router.  These are typically used to attach to waypoints on remote containers (brokers, etc.).",
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "addr": {
                    "type": "string",
                    "description": "The address of the provisioned object",
                    "create": true,
                    "required": true
                },
                "dir": {
                    "type": ["in", "out"],
                    "description": "The direction of the link to be created.  In means into the router, out means out of the router.",
                    "create": true,
                    "required": true
                },
                "phase": {
                    "type": "integer",
                    "description": "The address phase for this link.  Defaults to '0' for 'out' links and '1' for 'in' links.",
                    "create": true,
                    "required": false
                },
                "containerId": {
                    "type": "string",
                    "description": "ContainerID for the target container",
                    "create": true,
                    "required": false
                },
                "connection": {
                    "type": "string",
                    "description": "The name from a connector or listener",
                    "create": true,
                    "required": false
                },
                "linkRef": {
                    "type": "string",
                    "description": "Reference to the org.apache.qpid.dispatch.router.link if the link exists",
                    "create": false
                },
                "operStatus": {
                    "type": ["inactive", "attaching", "failed", "active", "quiescing", "idle"],
                    "description": "The operational status of this autoLink: inactive - The remote container is not connected; attaching - the link is attaching to the remote node; failed - the link attach failed; active - the link is attached and operational; quiescing - the link is transitioning to idle state; idle - the link is attached but there are no deliveries flowing and no unsettled deliveries.",
                    "create": false
                },
                "lastError": {
                    "type": "string",
                    "description": "The error description from the last attach failure",
                    "create": false
                }
            }
        },

        "router.link": {
            "description": "Link to another AMQP endpoint: router node, client or other AMQP process.",
            "extends": "operationalEntity",
            "operations": ["UPDATE"],
            "attributes": {
                "adminStatus": {
                    "type": ["enabled", "disabled"],
                    "default": "enabled",
                    "update": true
                },
                "operStatus": {
                    "type": ["up", "down", "quiescing", "idle"]
                },
                "linkName": {
                    "type": "string",
                    "description": "Name assigned to the link in the Attach."
                },
                "linkType": {
                    "type": ["endpoint", "router-control", "inter-router"],
                    "description": "Type of link: endpoint: a link to a normally connected endpoint; inter-router: a link to another router in the network."
                },
                "linkDir": {
                    "type": ["in", "out"],
                    "description": "Direction of delivery flow over the link, inbound or outbound to or from the router."
                },
                "owningAddr": {
                    "type": "string",
                    "description": "Address assigned to this link during attach: The target for inbound links or the source for outbound links."
                },
                "capacity": {
                    "type": "integer",
                    "description": "The capacity, in deliveries, for the link.  The number of undelivered plus unsettled deliveries shall not exceed the capacity.  This is enforced by link flow control."
                },
                "peer": {
                    "type": "string",
                    "description": "Identifier of the paired link if this is an attach-routed link."
                },
                "undeliveredCount": {
                    "type": "integer",
                    "graph": true,
                    "description": "The number of undelivered messages pending for the link."
                },
                "unsettledCount": {
                    "type": "integer",
                    "graph": true,
                    "description": "The number of unsettled deliveries awaiting settlement on the link"
                },
                "deliveryCount": {
                    "type": "integer",
                    "graph": true,
                    "description": "The total number of deliveries that have traversed this link."
                }
            }
        },

        "router.address": {
            "description": "AMQP address managed by the router.",
            "extends": "operationalEntity",
            "attributes": {
                "distribution": {
                    "type": ["flood", "multicast", "closest", "balanced", "linkBalanced"],
                    "description": "Forwarding treatment for the address: flood - messages delivered to all subscribers along all available paths (this will cause duplicate deliveries if there are redundant paths); multi - one copy of each message delivered to all subscribers; anyClosest - messages delivered to only the closest subscriber; anyBalanced - messages delivered to one subscriber with load balanced across subscribers; linkBalanced - for link-routing, link attaches balanced across destinations."
                },
                "inProcess": {
                    "type": "integer",
                    "description": "The number of in-process subscribers for this address"
                },
                "subscriberCount": {
                    "type": "integer",
                    "description": "The number of local subscribers for this address (i.e. attached to this router)",
                    "graph": true
                },
                "remoteCount": {
                    "type": "integer",
                    "description": "The number of remote routers that have at least one subscriber to this address",
                    "graph": true
                },
                "containerCount": {
                    "type": "integer",
                    "description": "The number of attached containers that serve this route address",
                    "graph": true
                },
                "deliveriesIngress": {
                    "type": "integer",
                    "description": "The number of deliveries to this address that entered the router network on this router",
                    "graph": true
                },
                "deliveriesEgress": {
                    "type": "integer",
                    "description": "The number of deliveries to this address that exited the router network on this router",
                    "graph": true
                },
                "deliveriesTransit": {
                    "type": "integer",
                    "description": "The number of deliveries to this address that transited this router to another router",
                    "graph": true
                },
                "deliveriesToContainer": {
                    "type": "integer",
                    "description": "The number of deliveries to this address that were given to an in-process subscriber",
                    "graph": true
                },
                "deliveriesFromContainer": {
                    "type": "integer",
                    "description": "The number of deliveries to this address that were originated from an in-process entity",
                    "graph": true
                },
                "key": {
                    "description": "Internal unique (to this router) key to identify the address",
                    "type": "string"
                },
                "remoteHostRouters": {
                    "type": "list",
                    "description": "List of remote routers on which there is a destination for this address."
                },
                "transitOutstanding": {
                    "type": "list",
                    "description": "List of numbers of outstanding deliveries across a transit (inter-router) link for this address.  This is for balanced distribution only."
                },
                "trackedDeliveries": {
                    "type": "integer",
                    "description": "Number of transit deliveries being tracked for this address (for balanced distribution)."
                }
            }
        },

        "router.node": {
            "description": "Remote router node connected to this router.",
            "extends": "operationalEntity",
            "attributes": {
                "id": {
                    "description": "Remote node identifier.",
                    "type": "string"
                },
                "instance": {
                    "description": "Remote node boot number.",
                    "type": "integer"
                },
                "linkState": {
                    "description": "List of remote node's neighbours.",
                    "type": "list"
                },
                "nextHop": {
                    "description": "Neighbour ID of next hop to remote node from here.",
                    "type": "string"
                },
                "validOrigins": {
                    "description": "List of valid origin nodes for messages arriving via the re mote node, used for duplicate elimination in redundant networks.",
                    "type": "list"
                },
                "address": {
                    "description": "Address of the remote node",
                    "type": "string"
                },
                "routerLink": {
                    "description": "Local link to remote node",
                    "type": "entityId"
                },
                "cost": {
                    "description": "Reachability cost",
                    "type": "integer"
                }
            }
        },

        "connection": {
            "description": "Connections to the router's container.",
            "extends": "operationalEntity",
            "attributes": {
                "container": {
                    "description": "The container for this connection",
                    "type": "string"
                } ,
                "opened": {
                    "type": "boolean",
                    "description": "The connection has been opened (i.e. AMQP OPEN)"
                },
                "host": {
                    "description": "IP address and port number in the form addr:port.",
                    "type": "string"
                },
                "dir": {
                    "description": "Direction of connection establishment in or out of the router.",
                    "type": ["in", "out"]
                },
                "role": {"type": "string"},
                "isAuthenticated": {
                    "description": "Indicates whether the identity of the connection's user is authentic.",
                    "type": "boolean"
                },
                "isEncrypted": {
                    "description": "Indicates whether the connection content is encrypted.",
                    "type": "boolean"
                },
                "sasl": {
                    "description": "SASL mechanism in effect for authentication.",
                    "type": "string"
                },
                "user": {
                    "description": "Identity of the authenticated user.",
                    "type": "string"
                },
                "ssl": {
                    "description": "True iff SSL/TLS is in effect for this connection.",
                    "type": "boolean"
                },
                "sslProto": {
                    "description": "SSL protocol name",
                    "type": "string"
                },
                "sslCipher": {
                    "description": "SSL cipher name",
                    "type": "string"
                },
                "sslSsf": {
                    "description": "SSL strength factor in effect",
                    "type": "integer"
                },
                "properties": {
                    "description": "Connection properties supplied by the peer.",
                    "type": "map"
                }
            }
        },

        "allocator": {
            "description": "Memory allocation pool.",
            "extends": "operationalEntity",
            "attributes": {
                "typeName": {"type": "string"},
                "typeSize": {"type": "integer"},
                "transferBatchSize": {"type": "integer"},
                "localFreeListMax": {"type": "integer", "graph": true},
                "globalFreeListMax": {"type": "integer", "graph": true},
                "totalAllocFromHeap": {"type": "integer", "graph": true},
                "totalFreeToHeap": {"type": "integer", "graph": true},
                "heldByThreads": {"type": "integer", "graph": true},
                "batchesRebalancedToThreads": {"type": "integer", "graph": true},
                "batchesRebalancedToGlobal": {"type": "integer", "graph": true}
            }
        },

        "console": {
            "description": "Start a websocket/tcp proxy and http file server to serve the web console",
            "extends": "configurationEntity",
            "singleton": true,
            "attributes": {
                "listener": {
                    "type": "string", 
                    "description": "The name of the listener to send the proxied tcp traffic to."
                },
                "wsport": {
                    "type": "integer",
                    "description": "port on which to listen for websocket traffic", 
                    "default": 5673
                },
                "proxy": {
                    "type": "string",
                    "description": "The full path to the proxy program to run."
                 },
                "home": {
                    "type": "string",
                    "description": "The full path to the html/css/js files for the console."
                },
                "args": {
                    "type": "string",
                    "description": "Optional args to pass the proxy program for logging, authentication, etc."
                }

            }
        },

        "policy": {
            "description": "Defines global connection limit",
            "extends": "configurationEntity",
            "singleton": true,
            "attributes": {
                "maxConnections": {
                    "type": "integer",
                    "default": 65535,
                    "description": "Global maximum number of concurrent client connections allowed. This limit is always enforced even if no other policy settings have been defined.",
                    "required": false,
                    "create": true
                },
                "enableVhostPolicy": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable vhost policy user groups, connection denial, and resource limit enforcement",
                    "required": false,
                    "create": true
                },
                "policyDir": {
                    "type": "path",
                    "default": "",
                    "description": "Absolute path to a directory that holds vhost definition .json files. All vhost definitions in all .json files in this directory are processed.",
                    "required": false,
                    "create": true
                },
                "defaultVhost": {
                    "type": "string",
                    "default": "$default",
                    "description": "Vhost rule set name to use for connections with a vhost that is otherwise not defined. Default vhost processing may be disabled either by erasing the definition of defaultVhost or by not defining a vhost object named '$default'.",
                    "required": false,
                    "create": true
                },
                "connectionsProcessed": {"type": "integer", "graph": true},
                "connectionsDenied": {"type": "integer", "graph": true},
                "connectionsCurrent": {"type": "integer", "graph": true}
            }
        },

        "vhost": {
            "description": "AMQP virtual host policy definition of users, user groups, allowed remote hosts, and AMQP restrictions.",
            "extends": "configurationEntity",
            "operations": ["CREATE", "UPDATE", "DELETE"],
            "attributes": {
                "id": {
                    "type": "string",
                    "description": "The vhost name.",
                    "required": true,
                    "create": true
                },
                "maxConnections": {
                    "type": "integer",
                    "default": 65535,
                    "description": "Maximum number of concurrent client connections allowed.",
                    "required": false,
                    "create": true,
                    "update": true
                },
                "maxConnectionsPerUser": {
                    "type": "integer",
                    "default": 65535,
                    "description": "Maximum number of concurrent client connections allowed for any single user.",
                    "required": false,
                    "create": true,
                    "update": true
                },
                "maxConnectionsPerHost": {
                    "type": "integer",
                    "default": 65535,
                    "description": "Maximum number of concurrent client connections allowed for any remote host.",
                    "required": false,
                    "create": true,
                    "update": true
                },
                "allowUnknownUser": {
                    "type": "boolean",
                    "description": "Unrestricted users, those who are not members of a defined user group, are allowed to connect to this application. Unrestricted users are assigned to the 'default' user group and receive 'default' settings.",
                    "default": false,
                    "required": false,
                    "create": true,
                    "update": true
                },
                "groups": {
                    "type": "map",
                    "description": "A map where each key is a user group name and the value is a map of the corresponding settings for that group.",
                    "required": false,
                    "create": true,
                    "update": true
                }
            }
        },

        "vhostStats": {
            "description": "Virtual host connection and access statistics.",
            "extends": "operationalEntity",
            "attributes": {
                "id": {
                    "type": "string",
                    "description": "The vhost name."
                },
                "connectionsApproved": {"type": "integer", "graph": true},
                "connectionsDenied": {"type": "integer", "graph": true},
                "connectionsCurrent": {"type": "integer", "graph": true},
                "perUserState": {
                    "type": "map",
                    "description": "A map where the key is the authenticated user name and the value is a list of the user's connections."
                },
                "perHostState": {
                    "type": "map",
                    "description": "A map where the key is the host name and the value is a list of the host's connections."
                },

                "sessionDenied": {"type": "integer", "graph": true},
                "senderDenied": {"type": "integer", "graph": true},
                "receiverDenied": {"type": "integer", "graph": true}
            }
        },
        
        "container": {
            "description":"(DEPRECATED)Attributes related to the AMQP container. This entity has been deprecated. Use the router entity instead.",
            "extends": "configurationEntity",
            "deprecated": true,
            "singleton": true,
            "attributes": {

                "containerName": {
                    "type": "string",
                    "description": "The  name of the AMQP container.  If not specified, the container name will be set to a value of the container's choosing.  The automatically assigned container name is not guaranteed to be persistent across restarts of the container.",
                    "create": true

                },
                "workerThreads": {
                    "type": "integer",
                    "default": 4,
                    "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) .",
                    "create": true

                },
                "debugDump": {
                    "type": "path",
                    "description": "A file to dump debugging information that can't be logged normally.",
                    "create": true

                },
                "saslConfigPath": {
                    "type": "path",
                    "description": "Absolute path to the SASL configuration file.",
                    "required": false,
                    "create": true
                },
                "saslConfigName": {
                    "type": "string",
                    "description": "Name of the SASL configuration.  This string + '.conf' is the name of the configuration file.",
                    "required": false,
                    "create": true
                }
            }
        },  

        "waypoint": {
            "description":"(DEPRECATED) A remote node that messages for an address pass through. This entity has been deprecated. Use autoLink instead",
            "deprecated": true,
            "extends": "configurationEntity",
            "operations": ["CREATE", "DELETE"],
            "attributes": {
                "address": {
                    "description":"The AMQP address of the waypoint.",
                    "type": "string",
                    "required": true,
                    "create": true
                },
                "connector": {
                    "description":"The name of the on-demand connector used to reach the waypoint's container.",
                    "type": "string",
                    "required": true,
                    "create": true
                },
                "inPhase": {
                    "description":"The phase of the address as it is routed _to_ the waypoint.",
                    "type": "integer",
                    "default": -1,
                    "create": true
                },
                "outPhase": {
                    "description":"The phase of the address as it is routed _from_ the waypoint.",
                    "type": "integer",
                    "default": -1,
                    "create": true
                }
            }
        },        
        
        "fixedAddress": {
            "description":"(DEPRECATED) Establishes treatment for addresses starting with a prefix. This entity has been deprecated. Use address instead",
            "extends": "configurationEntity",
            "deprecated": true,
            "operations": ["CREATE"],
            "attributes": {
                "prefix": {
                    "type": "string",
                    "required": true,
                    "description": "The address prefix (always starting with '/').",
                    "create": true
                },
                "phase": {
                    "type": "integer",
                    "description": "The phase of a multi-hop address passing through one or more waypoints.",
                    "create": true
                },
                "fanout": {
                    "type": [
                        "multiple",
                        "single"
                    ],
                    "default": "multiple",
                    "description": "One of 'multiple' or 'single'.  Multiple fanout is a non-competing pattern.  If there are multiple consumers using the same address, each consumer will receive its own copy of every message sent to the address.  Single fanout is a competing pattern where each message is sent to only one consumer.",
                    "create": true
                },
                "bias": {
                    "type": [
                        "closest",
                        "spread"
                    ],
                    "default": "closest",
                    "description": "Only if fanout is single.  One of 'closest' or 'spread'.  Closest bias means that messages to an address will always be delivered to the closest (lowest cost) subscribed consumer. Spread bias will distribute the messages across subscribers in an approximately even manner.",
                    "create": true
                }
            }
        },         
        
        "linkRoutePattern": {
            "description":"(DEPRECATED) An address pattern to match against link sources and targets to cause the router to link-route the attach across the network to a remote node. This entity has been deprecated. Use linkRoute instead",
            "deprecated": true,
            "extends": "configurationEntity",
            "operations": ["CREATE"],
            "attributes": {
                "prefix": {
                    "description":"An address prefix to match against target and source addresses.  This pattern must be of the form '<text>.<text1>.<textN>' or '<text>' or '<text>.' and matches any address that contains that prefix.  For example, if the prefix is set to org.apache (or org.apache.), any address that has the prefix 'org.apache'  (like org.apache.dev) will match. Note that a prefix must not start with a (.), can end in a (.) and can contain zero or more dots (.).  Any characters between the dots are simply treated as part of the address",
                    "type": "string",
                    "required": true,
                    "create": true
                },
                "dir": {
                    "description":"Link direction for match: 'in' matches only links inbound to the client; 'out' matches only links outbound from the client; 'both' matches any link.",
                    "type": ["in", "out", "both"],
                    "required": false,
                    "default": "both",
                    "create": true
                },
                "connector": {
                    "description":"The name of the on-demand connector used to reach the target node's container.  If this value is not provided, it means that the target container is expected to be connected to a different router in the network.  This prevents links to a link-routable address from being misinterpreted as message-routing links when there is no route to a valid destination available.",
                    "type": "string",
                    "required": false,
                    "default": "",
                    "create": true
                }
            }
        },             

        "dummy": {
            "description": "Dummy entity for test purposes.",
            "extends": "entity",
            "operations": ["CREATE", "READ", "UPDATE", "DELETE", "CALLME"],
            "attributes": {
                "arg1": {"type": "string", "create": true, "update": true},
                "arg2": {"type": "string", "create": true, "update": true},
                "num1": {"type": "integer", "create": true, "update": true},
                "num2": {"type": "integer", "create": true, "update": true}
            }
        }
    }
}
